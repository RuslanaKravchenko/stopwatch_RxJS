{"version":3,"sources":["utils/timeFormat.js","components/stopwatch/StopwatchStyled.js","components/stopwatch/Stopwatch.jsx","components/stopwatch/StopwatchContainer.js","components/App.js","index.js"],"names":["toHHMMSS","time","Date","toISOString","substr","StopwatchStyled","styled","section","Stopwatch","running","handleStart","handleStop","handleReset","className","slice","type","onClick","id","disabled","StopwatchContainer","useState","setTime","setRunning","timer$","interval","useEffect","waitBtn","document","getElementById","waitBtnClick$","fromEvent","pipe","map","now","bufferCount","filter","clickTime","subscribe","handleWait","unsubscribe","subscription","prev","a","App","ReactDOM","render"],"mappings":"4PAAaA,EAAW,SAACC,GACvB,OAAO,IAAIC,KAAY,IAAPD,GAAaE,cAAcC,OAAO,GAAI,I,QCyEzCC,E,MAzESC,EAAOC,QAAV,s8C,OC6CNC,EA3CG,SAAC,GAA6D,IAA3DP,EAA0D,EAA1DA,KAAMQ,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAC3D,OACE,eAAC,EAAD,WACE,oBAAIC,UAAU,mBAAd,uBAEA,oBAAGA,UAAU,qBAAb,UACE,sBAAMA,UAAU,2BAAhB,SAA4CZ,EAAKa,MAAM,EAAG,KAD5D,KAEE,sBAAMD,UAAU,2BAAhB,SAA4CZ,EAAKa,MAAM,EAAG,KAF5D,KAGE,sBAAMD,UAAU,2BAAhB,SAA4CZ,EAAKa,MAAM,QAGxDL,EACC,wBAAQM,KAAK,SAASC,QAASL,EAAYE,UAAU,iBAArD,kBAIA,wBAAQE,KAAK,SAASC,QAASN,EAAaG,UAAU,iBAAtD,mBAKF,sBAAKA,UAAU,2BAAf,UACE,wBACEE,KAAK,SACLE,GAAG,UACHC,UAAWT,EACXI,UAAU,iBAJZ,kBAQA,wBACEE,KAAK,SACLC,QAASJ,EACTM,UAAWT,EACXI,UAAU,kBAJZ,0BCoCOM,EA/DY,WAAO,IAAD,EACPC,mBAAS,GADF,mBACxBnB,EADwB,KAClBoB,EADkB,OAEDD,oBAAS,GAFR,mBAExBX,EAFwB,KAEfa,EAFe,KAIzBC,EAASC,YAAS,KAExBC,qBAAU,WACR,IAAMC,EAAUC,SAASC,eAAe,WAGlCC,EAAgBC,YAAUJ,EAAS,SACtCK,KACCC,aAAI,kBAAM9B,KAAK+B,SACfC,YALmB,EAKS,GAC5BC,aAAO,SAACC,GAEN,OAAOA,EAAU,GAAKA,EAAU,IAAM,QAGzCC,UAAUC,GACb,OAAO,kBAAMT,EAAcU,iBAC1B,IAEHd,qBAAU,WACR,GAAIhB,EAAS,CACX,IAAM+B,EAAejB,EAAOc,WAAU,WACpChB,GAAQ,SAACoB,GAAD,OAAUA,EAAO,QAE3B,OAAO,kBAAMD,EAAaD,kBAG3B,CAAC9B,IAEJ,IAAMC,EAAc,WAClBY,GAAW,IAGPX,EAAa,WACjBW,GAAW,GACXD,EAAQ,IAGJT,EAAW,uCAAG,sBAAA8B,EAAA,sEACZ/B,IADY,OAElBD,IAFkB,2CAAH,qDAKX4B,EAAa,WACjBhB,GAAW,IAIb,OACE,cAAC,EAAD,CACEZ,YAAaA,EACbC,WAAYA,EACZC,YAAaA,EACbH,QAASA,EACTR,KAAMD,EAASC,MCzDN0C,EAJH,WACV,OAAO,cAAC,EAAD,K,MCETC,IAASC,OAAO,cAAC,EAAD,IAASlB,SAASC,eAAe,W","file":"static/js/main.2d49affc.chunk.js","sourcesContent":["export const toHHMMSS = (time) => {\n  return new Date(time * 1000).toISOString().substr(11, 8);\n};\n","import styled from \"styled-components\";\nconst StopwatchStyled = styled.section`\n  padding: 50px 20px 0;\n  text-align: center;\n\n  .stopwatch__title {\n    margin-bottom: 20px;\n    font-size: 36px;\n    color: #0d5667;\n  }\n\n  .stopwatch__display {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 40px;\n    font-size: 50px;\n    color: #212121;\n  }\n\n  .stopwatch__display-units {\n    display: inline-block;\n    width: 70px;\n  }\n\n  .stopwatch__btn-container {\n    margin-top: 30px;\n\n    @media (max-width: 480px) {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n  }\n  .stopwatch__btn {\n    width: 200px;\n    height: 50px;\n    font-size: 18px;\n    font-weight: 700;\n    color: #fff;\n    background-color: #7915c5;\n    border-color: #7915c5;\n    border-radius: 30px;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    &:focus,\n    &:hover {\n      color: #7915c5;\n      background-color: #fff;\n      border: 2px solid #883dc7f2;\n      box-shadow: 6px 8px 18px 3px rgba(98, 46, 150, 0.23);\n      outline: none;\n    }\n\n    &:disabled {\n      cursor: default;\n      pointer-events: none;\n      background-color: #9e9fa0c7;\n      border-color: #9e9fa0c7;\n    }\n\n    @media (max-width: 480px) {\n      &:nth-child(1) {\n        margin-bottom: 15px;\n      }\n    }\n\n    @media (min-width: 768px) {\n      &:nth-child(1) {\n        margin-right: 15px;\n      }\n    }\n  }\n`;\nexport default StopwatchStyled;\n","import React from \"react\";\nimport StopwatchStyled from \"./StopwatchStyled\";\n\nconst Stopwatch = ({ time, running, handleStart, handleStop, handleReset }) => {\n  return (\n    <StopwatchStyled>\n      <h1 className=\"stopwatch__title\">Stopwatch</h1>\n\n      <p className=\"stopwatch__display\">\n        <span className=\"stopwatch__display-units\">{time.slice(0, 2)}</span> :\n        <span className=\"stopwatch__display-units\">{time.slice(3, 5)}</span> :\n        <span className=\"stopwatch__display-units\">{time.slice(6)}</span>\n      </p>\n\n      {running ? (\n        <button type=\"button\" onClick={handleStop} className=\"stopwatch__btn\">\n          Stop\n        </button>\n      ) : (\n        <button type=\"button\" onClick={handleStart} className=\"stopwatch__btn\">\n          Start\n        </button>\n      )}\n\n      <div className=\"stopwatch__btn-container\">\n        <button\n          type=\"button\"\n          id=\"waitBtn\"\n          disabled={!running}\n          className=\"stopwatch__btn\"\n        >\n          Wait\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleReset}\n          disabled={!running}\n          className=\"stopwatch__btn \"\n        >\n          Reset\n        </button>\n      </div>\n    </StopwatchStyled>\n  );\n};\n\nexport default Stopwatch;\n","import React, { useState, useEffect } from \"react\";\nimport { fromEvent, interval } from \"rxjs\";\nimport { bufferCount, filter, map } from \"rxjs/operators\";\nimport { toHHMMSS } from \"../../utils/timeFormat\";\nimport Stopwatch from \"./Stopwatch\";\n\nconst StopwatchContainer = () => {\n  const [time, setTime] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  const timer$ = interval(1000);\n\n  useEffect(() => {\n    const waitBtn = document.getElementById(\"waitBtn\");\n    const numberOfClicks = 2;\n\n    const waitBtnClick$ = fromEvent(waitBtn, \"click\")\n      .pipe(\n        map(() => Date.now()),\n        bufferCount(numberOfClicks, 1),\n        filter((clickTime) => {\n          // console.log(`Между кликами прошло: ${clickTime[1] - clickTime[0]}ms`);\n          return clickTime[1] - clickTime[0] <= 300;\n        })\n      )\n      .subscribe(handleWait);\n    return () => waitBtnClick$.unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    if (running) {\n      const subscription = timer$.subscribe(() => {\n        setTime((prev) => prev + 1);\n      });\n      return () => subscription.unsubscribe();\n    }\n    // eslint-disable-next-line\n  }, [running]);\n\n  const handleStart = () => {\n    setRunning(true);\n  };\n\n  const handleStop = () => {\n    setRunning(false);\n    setTime(0);\n  };\n\n  const handleReset = async () => {\n    await handleStop();\n    handleStart();\n  };\n\n  const handleWait = () => {\n    setRunning(false);\n    // console.log(\"Ставим на паузу!\");\n  };\n\n  return (\n    <Stopwatch\n      handleStart={handleStart}\n      handleStop={handleStop}\n      handleReset={handleReset}\n      running={running}\n      time={toHHMMSS(time)}\n    />\n  );\n};\n\nexport default StopwatchContainer;\n","import React from \"react\";\nimport StopwatchContainer from \"./stopwatch/StopwatchContainer\";\n\nconst App = () => {\n  return <StopwatchContainer />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"../node_modules/modern-normalize/modern-normalize.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}